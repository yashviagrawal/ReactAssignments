{"ast":null,"code":"class TicTacToeGame {\n  constructor() {\n    this.board = void 0;\n    this.currentPlayer = void 0;\n    this.winner = void 0;\n    this.board = Array(9).fill(null);\n    this.currentPlayer = 'X';\n    this.winner = null;\n  }\n  makeMove(index) {\n    if (!this.isCellEmpty(index) || this.winner !== null) {\n      return;\n    }\n    this.board[index] = this.currentPlayer;\n    this.checkWinner();\n    this.switchPlayer();\n  }\n  getCurrentPlayer() {\n    return this.currentPlayer;\n  }\n  getBoard() {\n    return this.board;\n  }\n  getWinner() {\n    return this.winner;\n  }\n  isGameOver() {\n    return this.isBoardFull() || this.winner !== null;\n  }\n  isCellEmpty(index) {\n    return this.board[index] === null;\n  }\n  switchPlayer() {\n    this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';\n  }\n  isBoardFull() {\n    return this.board.every(cell => cell !== null);\n  }\n  checkWinner() {\n    const winPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (const pattern of winPatterns) {\n      const [a, b, c] = pattern;\n      if (this.board[a] && this.board[a] === this.board[b] && this.board[a] === this.board[c]) {\n        this.winner = this.currentPlayer;\n        return;\n      }\n    }\n  }\n}\nexport default TicTacToeGame;","map":{"version":3,"names":["TicTacToeGame","constructor","board","currentPlayer","winner","Array","fill","makeMove","index","isCellEmpty","checkWinner","switchPlayer","getCurrentPlayer","getBoard","getWinner","isGameOver","isBoardFull","every","cell","winPatterns","pattern","a","b","c"],"sources":["C:/Users/agrawy1/OneDrive - Henkel/Documents/Workspace/GitHub/ReactAssignments/TicTacToe-ts/src/TicTacToeGame.ts"],"sourcesContent":["export type Player = 'X' | 'O';\r\ntype Board = Player[];\r\n\r\nclass TicTacToeGame {\r\n  private board: Board;\r\n  private currentPlayer: Player;\r\n  private winner: Player | null;\r\n\r\n  constructor() {\r\n    this.board = Array(9).fill(null);\r\n    this.currentPlayer = 'X';\r\n    this.winner = null;\r\n  }\r\n\r\n  public makeMove(index: number): void {\r\n    if (!this.isCellEmpty(index) || this.winner !== null) {\r\n      return;\r\n    }\r\n\r\n    this.board[index] = this.currentPlayer;\r\n    this.checkWinner();\r\n    this.switchPlayer();\r\n  }\r\n\r\n  public getCurrentPlayer(): Player {\r\n    return this.currentPlayer;\r\n  }\r\n\r\n  public getBoard(): Board {\r\n    return this.board;\r\n  }\r\n\r\n  public getWinner(): Player | null {\r\n    return this.winner;\r\n  }\r\n\r\n  public isGameOver(): boolean {\r\n    return this.isBoardFull() || this.winner !== null;\r\n  }\r\n\r\n  public isCellEmpty(index: number): boolean {\r\n    return this.board[index] === null;\r\n  }\r\n\r\n  private switchPlayer(): void {\r\n    this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';\r\n  }\r\n\r\n  private isBoardFull(): boolean {\r\n    return this.board.every((cell) => cell !== null);\r\n  }\r\n\r\n  private checkWinner(): void {\r\n    const winPatterns: number[][] = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (const pattern of winPatterns) {\r\n      const [a, b, c] = pattern;\r\n      if (this.board[a] && this.board[a] === this.board[b] && this.board[a] === this.board[c]) {\r\n        this.winner = this.currentPlayer;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TicTacToeGame;\r\n"],"mappings":"AAGA,MAAMA,aAAa,CAAC;EAKlBC,WAAWA,CAAA,EAAG;IAAA,KAJNC,KAAK;IAAA,KACLC,aAAa;IAAA,KACbC,MAAM;IAGZ,IAAI,CAACF,KAAK,GAAGG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAChC,IAAI,CAACH,aAAa,GAAG,GAAG;IACxB,IAAI,CAACC,MAAM,GAAG,IAAI;EACpB;EAEOG,QAAQA,CAACC,KAAa,EAAQ;IACnC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC,IAAI,IAAI,CAACJ,MAAM,KAAK,IAAI,EAAE;MACpD;IACF;IAEA,IAAI,CAACF,KAAK,CAACM,KAAK,CAAC,GAAG,IAAI,CAACL,aAAa;IACtC,IAAI,CAACO,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB;EAEOC,gBAAgBA,CAAA,EAAW;IAChC,OAAO,IAAI,CAACT,aAAa;EAC3B;EAEOU,QAAQA,CAAA,EAAU;IACvB,OAAO,IAAI,CAACX,KAAK;EACnB;EAEOY,SAASA,CAAA,EAAkB;IAChC,OAAO,IAAI,CAACV,MAAM;EACpB;EAEOW,UAAUA,CAAA,EAAY;IAC3B,OAAO,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,IAAI,CAACZ,MAAM,KAAK,IAAI;EACnD;EAEOK,WAAWA,CAACD,KAAa,EAAW;IACzC,OAAO,IAAI,CAACN,KAAK,CAACM,KAAK,CAAC,KAAK,IAAI;EACnC;EAEQG,YAAYA,CAAA,EAAS;IAC3B,IAAI,CAACR,aAAa,GAAG,IAAI,CAACA,aAAa,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;EAC7D;EAEQa,WAAWA,CAAA,EAAY;IAC7B,OAAO,IAAI,CAACd,KAAK,CAACe,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAK,IAAI,CAAC;EAClD;EAEQR,WAAWA,CAAA,EAAS;IAC1B,MAAMS,WAAuB,GAAG,CAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;IAED,KAAK,MAAMC,OAAO,IAAID,WAAW,EAAE;MACjC,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,OAAO;MACzB,IAAI,IAAI,CAAClB,KAAK,CAACmB,CAAC,CAAC,IAAI,IAAI,CAACnB,KAAK,CAACmB,CAAC,CAAC,KAAK,IAAI,CAACnB,KAAK,CAACoB,CAAC,CAAC,IAAI,IAAI,CAACpB,KAAK,CAACmB,CAAC,CAAC,KAAK,IAAI,CAACnB,KAAK,CAACqB,CAAC,CAAC,EAAE;QACvF,IAAI,CAACnB,MAAM,GAAG,IAAI,CAACD,aAAa;QAChC;MACF;IACF;EACF;AACF;AAEA,eAAeH,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}